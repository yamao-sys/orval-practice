/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * (title)
 * A sample service
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PostAuthSignIn200,
  PostAuthSignIn400,
  PostAuthSignIn500,
  PostAuthSignUp500,
  PostAuthValidateSignUp500,
  SignInInput,
  SignUpInput,
  SignUpValidationErrorResponse
} from '.././model';





/**
 * @summary Sign In
 */
export type postAuthSignInResponse200 = {
  data: PostAuthSignIn200
  status: 200
}

export type postAuthSignInResponse400 = {
  data: PostAuthSignIn400
  status: 400
}

export type postAuthSignInResponse500 = {
  data: PostAuthSignIn500
  status: 500
}
    
export type postAuthSignInResponseComposite = postAuthSignInResponse200 | postAuthSignInResponse400 | postAuthSignInResponse500;
    
export type postAuthSignInResponse = postAuthSignInResponseComposite & {
  headers: Headers;
}

export const getPostAuthSignInUrl = () => {


  

  return `/auth/sign-in`
}

export const postAuthSignIn = async (signInInput: SignInInput, options?: RequestInit): Promise<postAuthSignInResponse> => {
  
  const res = await fetch(getPostAuthSignInUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      signInInput,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postAuthSignInResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postAuthSignInResponse
}




export const getPostAuthSignInMutationOptions = <TError = PostAuthSignIn400 | PostAuthSignIn500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignIn>>, TError,{data: SignInInput}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignIn>>, TError,{data: SignInInput}, TContext> => {

const mutationKey = ['postAuthSignIn'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignIn>>, {data: SignInInput}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSignIn(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignIn>>>
    export type PostAuthSignInMutationBody = SignInInput
    export type PostAuthSignInMutationError = PostAuthSignIn400 | PostAuthSignIn500

    /**
 * @summary Sign In
 */
export const usePostAuthSignIn = <TError = PostAuthSignIn400 | PostAuthSignIn500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignIn>>, TError,{data: SignInInput}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postAuthSignIn>>,
        TError,
        {data: SignInInput},
        TContext
      > => {

      const mutationOptions = getPostAuthSignInMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Sign Up
 */
export type postAuthSignUpResponse200 = {
  data: SignUpValidationErrorResponse
  status: 200
}

export type postAuthSignUpResponse400 = {
  data: SignUpValidationErrorResponse
  status: 400
}

export type postAuthSignUpResponse500 = {
  data: PostAuthSignUp500
  status: 500
}
    
export type postAuthSignUpResponseComposite = postAuthSignUpResponse200 | postAuthSignUpResponse400 | postAuthSignUpResponse500;
    
export type postAuthSignUpResponse = postAuthSignUpResponseComposite & {
  headers: Headers;
}

export const getPostAuthSignUpUrl = () => {


  

  return `/auth/sign-up`
}

export const postAuthSignUp = async (signUpInput: SignUpInput, options?: RequestInit): Promise<postAuthSignUpResponse> => {
    const formData = new FormData();
formData.append(`firstName`, signUpInput.firstName)
formData.append(`lastName`, signUpInput.lastName)
formData.append(`email`, signUpInput.email)
formData.append(`password`, signUpInput.password)
if(signUpInput.birthday !== undefined) {
 formData.append(`birthday`, signUpInput.birthday)
 }
if(signUpInput.frontIdentification !== undefined) {
 formData.append(`frontIdentification`, signUpInput.frontIdentification)
 }
if(signUpInput.backIdentification !== undefined) {
 formData.append(`backIdentification`, signUpInput.backIdentification)
 }

  const res = await fetch(getPostAuthSignUpUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postAuthSignUpResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postAuthSignUpResponse
}




export const getPostAuthSignUpMutationOptions = <TError = SignUpValidationErrorResponse | PostAuthSignUp500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignUp>>, TError,{data: SignUpInput}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignUp>>, TError,{data: SignUpInput}, TContext> => {

const mutationKey = ['postAuthSignUp'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignUp>>, {data: SignUpInput}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSignUp(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignUp>>>
    export type PostAuthSignUpMutationBody = SignUpInput
    export type PostAuthSignUpMutationError = SignUpValidationErrorResponse | PostAuthSignUp500

    /**
 * @summary Sign Up
 */
export const usePostAuthSignUp = <TError = SignUpValidationErrorResponse | PostAuthSignUp500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignUp>>, TError,{data: SignUpInput}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postAuthSignUp>>,
        TError,
        {data: SignUpInput},
        TContext
      > => {

      const mutationOptions = getPostAuthSignUpMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Validate Sign Up
 */
export type postAuthValidateSignUpResponse200 = {
  data: SignUpValidationErrorResponse
  status: 200
}

export type postAuthValidateSignUpResponse400 = {
  data: SignUpValidationErrorResponse
  status: 400
}

export type postAuthValidateSignUpResponse500 = {
  data: PostAuthValidateSignUp500
  status: 500
}
    
export type postAuthValidateSignUpResponseComposite = postAuthValidateSignUpResponse200 | postAuthValidateSignUpResponse400 | postAuthValidateSignUpResponse500;
    
export type postAuthValidateSignUpResponse = postAuthValidateSignUpResponseComposite & {
  headers: Headers;
}

export const getPostAuthValidateSignUpUrl = () => {


  

  return `/auth/validate-sign-up`
}

export const postAuthValidateSignUp = async (signUpInput: SignUpInput, options?: RequestInit): Promise<postAuthValidateSignUpResponse> => {
    const formData = new FormData();
formData.append(`firstName`, signUpInput.firstName)
formData.append(`lastName`, signUpInput.lastName)
formData.append(`email`, signUpInput.email)
formData.append(`password`, signUpInput.password)
if(signUpInput.birthday !== undefined) {
 formData.append(`birthday`, signUpInput.birthday)
 }
if(signUpInput.frontIdentification !== undefined) {
 formData.append(`frontIdentification`, signUpInput.frontIdentification)
 }
if(signUpInput.backIdentification !== undefined) {
 formData.append(`backIdentification`, signUpInput.backIdentification)
 }

  const res = await fetch(getPostAuthValidateSignUpUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postAuthValidateSignUpResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postAuthValidateSignUpResponse
}




export const getPostAuthValidateSignUpMutationOptions = <TError = SignUpValidationErrorResponse | PostAuthValidateSignUp500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthValidateSignUp>>, TError,{data: SignUpInput}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthValidateSignUp>>, TError,{data: SignUpInput}, TContext> => {

const mutationKey = ['postAuthValidateSignUp'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthValidateSignUp>>, {data: SignUpInput}> = (props) => {
          const {data} = props ?? {};

          return  postAuthValidateSignUp(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthValidateSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthValidateSignUp>>>
    export type PostAuthValidateSignUpMutationBody = SignUpInput
    export type PostAuthValidateSignUpMutationError = SignUpValidationErrorResponse | PostAuthValidateSignUp500

    /**
 * @summary Validate Sign Up
 */
export const usePostAuthValidateSignUp = <TError = SignUpValidationErrorResponse | PostAuthValidateSignUp500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthValidateSignUp>>, TError,{data: SignUpInput}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postAuthValidateSignUp>>,
        TError,
        {data: SignUpInput},
        TContext
      > => {

      const mutationOptions = getPostAuthValidateSignUpMutationOptions(options);

      return useMutation(mutationOptions );
    }
    